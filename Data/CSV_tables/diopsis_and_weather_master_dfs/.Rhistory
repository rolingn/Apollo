#geom_rug(data = raw_df, aes(ISWR), sides = "b", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Incoming short wave radiation [W/m\u00B2]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
RH <- ggplot(preds_RH, aes(x = RH, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = RH), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = RH), sides = "t", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Relative humidity [%]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
P <- ggplot(preds_P, aes(x = P, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = P), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = P), sides = "t", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Air pressure [Pa]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
TA <- ggplot(preds_TA, aes(x = TA, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = TA), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = TA), sides = "t", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Air temperature [Â°C]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
VW <- ggplot(preds_VW, aes(x = VW, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(VW), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(VW), sides = "t", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Wind speed [m/s]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
hour <- ggplot(preds_hour, aes(x = Hour, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Hour of day", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
day <- ggplot(preds_day, aes(x = day_of_year, y = estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = conf.high), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(day_of_year), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(day_of_year), sides = "t", inherit.aes = FALSE, alpha = .1) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) {exponents <- log10(x)
labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Pred. ", predicted, " (log scale)"), x = "Day of year", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"), labels = c("Lower", "Middle", "Upper"))
parametric_data <- as.data.frame(s$p.table)
site_data <- plot_predictions(model, condition = c("site"), type = "response", draw = FALSE)
position_data <- plot_predictions(model, condition = c("position"), type = "response", draw = FALSE)
position <- data.frame(
position = c("Lower", "Middle", "Upper"),
estimate = c(position_data[position_data$position == "Lower", "estimate"], position_data[position_data$position == "Middle", "estimate"], position_data[position_data$position == "Upper", "estimate"]),
error = c(position_data[position_data$position == "Lower", "std.error"], position_data[position_data$position == "Middle", "std.error"], position_data[position_data$position == "Upper", "std.error"]),
stringsAsFactors = T
)
site <- data.frame(
site = c("Jatzhorn", "Monstein", "Weissfluhjoch"),
estimate = c(site_data[site_data$site == "Jatzhorn", "estimate"],
site_data[site_data$site == "Monstein", "estimate"],
site_data[site_data$site == "Weissfluhjoch", "estimate"]),
error = c(site_data[site_data$site == "Jatzhorn", "std.error"],
site_data[site_data$site == "Monstein", "std.error"],
site_data[site_data$site == "Weissfluhjoch", "std.error"]),
stringsAsFactors = T
)
position <- ggplot(position, aes(x = position, y = estimate)) +
geom_pointrange(aes(ymin = estimate - error, ymax = estimate + error)) +
labs(y = paste0("Pred. ", predicted), x = "Position") +
theme_classic()
site <- ggplot(site, aes(x = site, y = estimate)) +
geom_pointrange(aes(ymin = estimate - error, ymax = estimate + error)) +
labs(y = paste0("Pred. ", predicted), x = "Transect") +
theme_classic()
f <- formula(model)
f <- deparse(f)
f <- trimws(f)
f <- paste0(f, collapse = " ")
dev <- round(s$dev.expl, 4) * 100
f <- paste0(f, paste0("\nDeviance explained: ", dev, "%"), collapse = " ")
f <- gsub(",\\s*k\\s*=\\s*\\d+", "", f)
f <- gsub("site", "Transect", f)
plus_count <- 0
f <- str_replace_all(f, "\\+ ", function(x) {
plus_count <<- plus_count + 1
if (plus_count %% 1 == 0) {
"+\n"
} else {
"+"
}
})
text_plot <- ggplot() +
annotate("label", x = 1, y = 1,
label = f,
size = 3.5, fill = "transparent", color = "black") +
theme_void() +
coord_cartesian(clip = "off")
parametric <- position + site + plot_layout(widths = c(1, 1.75))
bottom_row <- (day + parametric + text_plot) +
plot_layout(widths = c(.95, 1.25, 0.85))
combined <- (ISWR + RH + P + TA + VW + hour) / bottom_row +
plot_layout(guides = "collect", heights = c(2,1)) &
theme(legend.box = "vertical")
return(combined)
}
build_master_plot_altitude_partial <- function(model, raw_df, stat_type = c("F", "Chi.sq"), predicted = "Abundance", stat_leg_name = "F-Statistic", y_low_lim = 1e-1) {
stat_type <- match.arg(stat_type)
s <- summary(model)
stat_col <- switch(stat_type, "F" = "F", "Chi.sq" = "Chi.sq")
if (!(stat_col %in% colnames(s$s.table))) {
stop(paste0("Statistic '", stat_col, "' not found in model summary."))}
smooth_terms <- s$s.table
term_stats <- data.frame(
Term = rownames(smooth_terms),
Statistic = smooth_terms[, stat_col],
p_value = smooth_terms[, "p-value"])
stat_min <- min(term_stats$Statistic, na.rm = TRUE)
stat_max <- max(term_stats$Statistic, na.rm = TRUE)
add_statistic <- function(preds, term_stats, var) {
var <- sym(var)
var_ranges <- raw_df %>%
group_by(position) %>%
summarise(
min = min(!!var, na.rm = TRUE),
max = max(!!var, na.rm = TRUE),
.groups = "drop")
preds <- preds %>%
mutate(
# lower = pmax(.estimate - 1.96 * .se, min(preds$.estimate)),
lower = .estimate - 1.96 * .se,
upper = .estimate + 1.96 * .se) %>%
left_join(term_stats %>% select(Term, Statistic, p_value), by = c(".smooth" = "Term")) %>%
left_join(var_ranges, by = "position") %>%
filter(!!var >= min & !!var <= max) %>%
select(-min, -max)
return(preds)}
preds_ISWR <- add_statistic(smooth_estimates(model, select = "ISWR", partial_match = T), term_stats, "ISWR")
preds_RH   <- add_statistic(smooth_estimates(model, select = "RH", partial_match = T), term_stats, "RH")
preds_P    <- add_statistic(smooth_estimates(model, select = "P", partial_match = T), term_stats, "P")
preds_TA   <- add_statistic(smooth_estimates(model, select = "TA", partial_match = T), term_stats, "TA")
preds_VW   <- add_statistic(smooth_estimates(model, select = "VW", partial_match = T), term_stats, "VW")
preds_hour <- add_statistic(smooth_estimates(model, select = "Hour", partial_match = T), term_stats, "Hour")
preds_day  <- add_statistic(smooth_estimates(model, select = "day_of_year", partial_match = T), term_stats, "day_of_year")
ISWR <- ggplot(preds_ISWR, aes(x = ISWR, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df, aes(ISWR), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Incoming short wave radiation [W/m\u00B2]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
RH <- ggplot(preds_RH, aes(x = RH, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = RH), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = RH), sides = "t", inherit.aes = FALSE, alpha = .1) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Relative humidity [%]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
P <- ggplot(preds_P, aes(x = P, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = P), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = P), sides = "t", inherit.aes = FALSE, alpha = .1) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Air pressure [Pa]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
TA <- ggplot(preds_TA, aes(x = TA, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = TA), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = TA), sides = "t", inherit.aes = FALSE, alpha = .1) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Air temperature [Â°C]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
VW <- ggplot(preds_VW, aes(x = VW, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(VW), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(VW), sides = "t", inherit.aes = FALSE, alpha = .1) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Wind speed [m/s]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
hour <- ggplot(preds_hour, aes(x = Hour, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Hour of day", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
day <- ggplot(preds_day, aes(x = day_of_year, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(day_of_year), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(day_of_year), sides = "t", inherit.aes = FALSE, alpha = .1) +
# scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
#               labels = function(x) {exponents <- log10(x)
#               labels <- ifelse(is.finite(exponents), paste0("10^", exponents), NA)
#               parse(text = labels)}, limits = c(y_low_lim, NA)) +
labs(y = paste0("Partial effect on ", predicted), x = "Day of year", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
parametric <- broom::tidy(model, parametric = TRUE)
site <- parametric %>%
filter(str_detect(term, "^site")) %>%
mutate(site = str_remove(term, "^site")) %>%
select(site, everything(), -term) %>%
add_row(site = "Jatzhorn",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
position <- parametric %>%
filter(str_detect(term, "^position")) %>%
mutate(position = str_remove(term, "^position")) %>%
select(position, everything(), -term) %>%
add_row(position = "Lower",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
position <- ggplot(position, aes(x = position, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "Position") +
theme_classic()
site <- ggplot(site, aes(x = site, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "Transect") +
theme_classic()
f <- formula(model)
f <- deparse(f)
f <- trimws(f)
f <- paste0(f, collapse = " ")
dev <- round(s$dev.expl, 4) * 100
f <- paste0(f, paste0("\nDeviance explained: ", dev, "%"), collapse = " ")
f <- gsub(",\\s*k\\s*=\\s*\\d+", "", f)
f <- gsub("site", "Transect", f)
plus_count <- 0
f <- str_replace_all(f, "\\+ ", function(x) {
plus_count <<- plus_count + 1
if (plus_count %% 1 == 0) {
"+\n"
} else {
"+"
}
})
text_plot <- ggplot() +
annotate("label", x = 1, y = 1,
label = f,
size = 3.5, fill = "transparent", color = "black") +
theme_void() +
coord_cartesian(clip = "off")
parametric <- position + site + plot_layout(widths = c(1, 1.75))
bottom_row <- (day + parametric + text_plot) +
plot_layout(widths = c(.95, 1.25, 0.85))
combined <- (ISWR + RH + P + TA + VW + hour) / bottom_row +
plot_layout(guides = "collect", heights = c(2,1)) &
theme(legend.box = "vertical")
return(combined)
}
build_master_plot_altitude_partial_LED_On <- function(model, raw_df, stat_type = c("F", "Chi.sq"), predicted = "Abundance", stat_leg_name = "F-Statistic", y_low_lim = 1e-1) {
stat_type <- match.arg(stat_type)
s <- summary(model)
stat_col <- switch(stat_type, "F" = "F", "Chi.sq" = "Chi.sq")
if (!(stat_col %in% colnames(s$s.table))) {
stop(paste0("Statistic '", stat_col, "' not found in model summary."))}
smooth_terms <- s$s.table
term_stats <- data.frame(
Term = rownames(smooth_terms),
Statistic = smooth_terms[, stat_col],
p_value = smooth_terms[, "p-value"])
stat_min <- min(term_stats$Statistic, na.rm = TRUE)
stat_max <- max(term_stats$Statistic, na.rm = TRUE)
add_statistic <- function(preds, term_stats, var) {
var <- sym(var)
var_ranges <- raw_df %>%
group_by(position) %>%
summarise(
min = min(!!var, na.rm = TRUE),
max = max(!!var, na.rm = TRUE),
.groups = "drop")
preds <- preds %>%
mutate(
# lower = pmax(.estimate - 1.96 * .se, min(preds$.estimate)),
lower = .estimate - 1.96 * .se,
upper = .estimate + 1.96 * .se) %>%
left_join(term_stats %>% select(Term, Statistic, p_value), by = c(".smooth" = "Term")) %>%
left_join(var_ranges, by = "position") %>%
filter(!!var >= min & !!var <= max) %>%
select(-min, -max)
return(preds)}
preds_RH   <- add_statistic(smooth_estimates(model, select = "RH", partial_match = T), term_stats, "RH")
preds_P    <- add_statistic(smooth_estimates(model, select = "P", partial_match = T), term_stats, "P")
preds_TA   <- add_statistic(smooth_estimates(model, select = "TA", partial_match = T), term_stats, "TA")
preds_VW   <- add_statistic(smooth_estimates(model, select = "VW", partial_match = T), term_stats, "VW")
preds_hour <- add_statistic(smooth_estimates(model, select = "Hour", partial_match = T), term_stats, "Hour")
preds_day  <- add_statistic(smooth_estimates(model, select = "day_of_year", partial_match = T), term_stats, "day_of_year")
RH <- ggplot(preds_RH, aes(x = RH, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = RH), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = RH), sides = "t", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Relative humidity [%]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
P <- ggplot(preds_P, aes(x = P, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = P), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = P), sides = "t", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Air pressure [Pa]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
TA <- ggplot(preds_TA, aes(x = TA, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = TA), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = TA), sides = "t", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Air temperature [Â°C]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
VW <- ggplot(preds_VW, aes(x = VW, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(VW), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(VW), sides = "t", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Wind speed [m/s]", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
hour <- ggplot(preds_hour, aes(x = Hour, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
labs(y = paste0("Partial effect on ", predicted), x = "Hour of day", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
day <- ggplot(preds_day, aes(x = day_of_year, y = .estimate, color = Statistic, fill = Statistic, linetype = position)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
#geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(day_of_year), sides = "b", inherit.aes = FALSE, alpha = .1) +
#geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(day_of_year), sides = "t", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Day of year", color = "Chi squared", fill = "Chi squared", linetype = "Position") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "Position", values = c("solid", "dashed", "dotted"))
parametric <- broom::tidy(model, parametric = TRUE)
site <- parametric %>%
filter(str_detect(term, "^site")) %>%
mutate(site = str_remove(term, "^site")) %>%
select(site, everything(), -term) %>%
add_row(site = "Jatzhorn",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
position <- parametric %>%
filter(str_detect(term, "^position")) %>%
mutate(position = str_remove(term, "^position")) %>%
select(position, everything(), -term) %>%
add_row(position = "Lower",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
position <- ggplot(position, aes(x = position, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "Position") +
theme_classic()
site <- ggplot(site, aes(x = site, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "Transect") +
theme_classic()
f <- formula(model)
f <- deparse(f)
f <- trimws(f)
f <- paste0(f, collapse = " ")
dev <- round(s$dev.expl, 4) * 100
f <- paste0(f, paste0("\nDeviance explained: ", dev, "%"), collapse = " ")
f <- gsub(",\\s*k\\s*=\\s*\\d+", "", f)
f <- gsub("site", "Transect", f)
plus_count <- 0
f <- str_replace_all(f, "\\+ ", function(x) {
plus_count <<- plus_count + 1
if (plus_count %% 1 == 0) {
"+\n"
} else {
"+"
}
})
text_plot <- ggplot() +
annotate("label", x = 1, y = 1,
label = f,
size = 3.5, fill = "transparent", color = "black") +
theme_void() +
coord_cartesian(clip = "off")
parametric <- position + site + plot_layout(widths = c(1, 1.75))
bottom_row <- (day + parametric + text_plot) +
plot_layout(widths = c(.95, 1.25, 0.85))
combined <- (plot_spacer() + RH + P + TA + VW + hour) / bottom_row +
plot_layout(guides = "collect", heights = c(2,1)) &
theme(legend.box = "vertical")
return(combined)
}
rm()
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/diopsis_and_weather_master_dfs")
df <- read.csv("hourly.csv", sep = ",") %>%
factor_wizzard(c("LED", "site", "position")) %>%
mutate(timestamp = as.POSIXct(timestamp))
df_3h <- read.csv("3hourly.csv", sep = ",") %>%
factor_wizzard(c("LED", "site", "position")) %>%
mutate(timestamp = as.POSIXct(timestamp))
rm(factor_wizzard)
df <- df %>% filter(!is.na(hourly_abundance))
df_3h <- df_3h %>% filter(!is.na(hourly_abundance))
df_LED_Off <- df %>% filter(LED == "LED Off")
df_LED_On <- df %>% filter(LED == "LED On")
df_3h_LED_Off <- df_3h %>% filter(LED == "LED Off")
df_3h_LED_On <- df_3h %>% filter(LED == "LED On")
View(df_LED_On)
df_LED_On$Moon <- lunar.illumination(df_LED_On$timestamp)
system.time({
m_abundance_LED_On <- gam(hourly_abundance ~ s(RH, k = 7, by = position) +
s(P, k = 5, by = position) +
s(TA, k = 15, by = position) +
s(VW, k = 6, by = position) +
s(Hour, k = 3, by = position) +
s(day_of_year, k = 20, by = position) +
s(Moon, k = 10, by = position) + ## Test
site + position
, family = nb(link = "log"), data = df_LED_On, select = TRUE, method = "REML")
})["elapsed"] / 60 # 2.6 min
draw(m_abundance_LED_On, parametric = F, guides = "collect") & theme_classic()
#m_abundance_LED_On <- readRDS("m_abundance_LED_On.rds")
summary(m_abundance_LED_On)
m_Moon <- gam(hourly_abundance ~ s(Moon, k = 20)
, family = nb(link = "log"), data = df_LED_On, select = TRUE, method = "REML")
draw(m_Moon, parametric = F, guides = "collect") & theme_classic()
m_Moon <- gam(hourly_abundance ~ s(Moon, k = 20, by = position)
, family = nb(link = "log"), data = df_LED_On, select = TRUE, method = "REML")
draw(m_Moon, parametric = F, guides = "collect") & theme_classic()
summary(m_Moon)
