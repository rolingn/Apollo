upper = .estimate + 1.96 * .se) %>%
left_join(term_stats %>% select(Term, Statistic, p_value), by = c(".smooth" = "Term")) %>%
left_join(var_ranges, by = "LED") %>%
filter(!!var >= min & !!var <= max) %>%
select(-min, -max)
} else {
min = min(raw_df[[var]], na.rm = TRUE)
max = max(raw_df[[var]], na.rm = TRUE)
preds <- preds %>%
mutate(
# lower = pmax(.estimate - 1.96 * .se, min(preds$.estimate)),
lower = .estimate - 1.96 * .se,
upper = .estimate + 1.96 * .se) %>%
left_join(term_stats %>% select(Term, Statistic, p_value), by = c(".smooth" = "Term")) %>%
filter(!!var >= min & !!var <= max)
}
return(preds)}
preds_ISWR <- add_statistic(smooth_estimates(model, select = "ISWR", partial_match = T), term_stats, "ISWR", by_interaction = F)
preds_RH   <- add_statistic(smooth_estimates(model, select = "RH", partial_match = T), term_stats, "RH", T)
preds_P    <- add_statistic(smooth_estimates(model, select = "P", partial_match = T), term_stats, "P", T)
preds_TA   <- add_statistic(smooth_estimates(model, select = "TA", partial_match = T), term_stats, "TA", T)
preds_VW   <- add_statistic(smooth_estimates(model, select = "VW", partial_match = T), term_stats, "VW", T)
preds_hour <- add_statistic(smooth_estimates(model, select = "Hour", partial_match = T), term_stats, "Hour", F)
preds_day  <- add_statistic(smooth_estimates(model, select = "dayofyear", partial_match = T), term_stats, "dayofyear", T)
ISWR <- ggplot(preds_ISWR, aes(x = ISWR, y = .estimate, color = Statistic, fill = Statistic)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df, aes(ISWR), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Incoming short wave radiation [W/m\u00B2]", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
RH <- ggplot(preds_RH, aes(x = RH, y = .estimate, color = Statistic, fill = Statistic, linetype = LED)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = RH), sides = "t", inherit.aes = FALSE, alpha = .1) +
geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = RH), sides = "tb", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Relative humidity [%]", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
P <- ggplot(preds_P, aes(x = P, y = .estimate, color = Statistic, fill = Statistic, linetype = LED)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = P), sides = "t", inherit.aes = FALSE, alpha = .1) +
geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = P), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Air pressure [Pa]", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
TA <- ggplot(preds_TA, aes(x = TA, y = .estimate, color = Statistic, fill = Statistic, linetype = LED)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(x = TA), sides = "t", inherit.aes = FALSE, alpha = .1) +
geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(x = TA), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Air temperature [Â°C]", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
VW <- ggplot(preds_VW, aes(x = VW, y = .estimate, color = Statistic, fill = Statistic, linetype = LED)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(VW), sides = "t", inherit.aes = FALSE, alpha = .1) +
geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(VW), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Wind speed [m/s]", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
hour <- ggplot(preds_hour, aes(x = Hour, y = .estimate, color = Statistic, fill = Statistic)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
labs(y = paste0("Partial effect on ", predicted), x = "Hour of day", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() + theme(legend.position = "none") +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
day <- ggplot(preds_day, aes(x = dayofyear, y = .estimate, color = Statistic, fill = Statistic, linetype = LED)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA, show.legend = FALSE) +
geom_rug(data = raw_df %>% filter(LED == "LED Off"), aes(dayofyear), sides = "t", inherit.aes = FALSE, alpha = .1) +
geom_rug(data = raw_df %>% filter(LED == "LED On"), aes(dayofyear), sides = "b", inherit.aes = FALSE, alpha = .1) +
labs(y = paste0("Partial effect on ", predicted), x = "Day of year", color = "Chi squared", fill = "Chi squared", linetype = "LED") +
theme_classic() +
scale_color_viridis_c(name = stat_leg_name, limits = c(stat_min, stat_max)) +
scale_fill_viridis_c(name = stat_leg_name, alpha = 0.2, limits = c(stat_min, stat_max)) +
scale_linetype_manual(name = "LED", values = c("solid", "dashed", "dotted"))
parametric <- broom::tidy(model, parametric = TRUE)
site <- parametric %>%
filter(str_detect(term, "^site")) %>%
mutate(site = str_remove(term, "^site")) %>%
select(site, everything(), -term) %>%
add_row(site = "Jatzhorn",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
LED <- parametric %>%
filter(str_detect(term, "^LED")) %>%
mutate(LED = str_remove(term, "^LED")) %>%
select(LED, everything(), -term) %>%
add_row(LED = "LED Off",estimate = 0,std.error = 0,statistic = 0,p.value = 1)
LED <- ggplot(LED, aes(x = LED, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "LED") +
theme_classic()
site <- ggplot(site, aes(x = site, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
labs(y = paste0("Partial effect on ", predicted), x = "Transect") +
theme_classic()
f <- formula(model)
f <- deparse(f)
f <- trimws(f)
f <- paste0(f, collapse = " ")
dev <- round(s$dev.expl, 4) * 100
f <- paste0(f, paste0("\nDeviance explained: ", dev, "%"), collapse = " ")
f <- gsub(",\\s*k\\s*=\\s*\\d+", "", f)
f <- gsub("site", "Transect", f)
plus_count <- 0
f <- str_replace_all(f, "\\+ ", function(x) {
plus_count <<- plus_count + 1
if (plus_count %% 1 == 0) {
"+\n"
} else {
"+"
}
})
text_plot <- ggplot() +
annotate("label", x = 1, y = 1,
label = f,
size = 3.5, fill = "transparent", color = "black") +
theme_void() +
coord_cartesian(clip = "off")
parametric <- LED + site + plot_layout(widths = c(1, 1.75))
bottom_row <- (day + parametric + text_plot) +
plot_layout(widths = c(.95, 1.25, 0.85))
combined <- (ISWR + RH + P + TA + VW + hour) / bottom_row +
plot_layout(guides = "collect", heights = c(2,1)) &
theme(legend.box = "vertical")
return(combined)
}
build_master_plot_partial(m_reduced2, df, stat_type = "Chi.sq", predicted = "Body Size", stat_leg_name = "Chi\u00B2-Statistic", y_low_lim = NA)
ggsave("/Volumes/Apollo/Davos/Plots/eda/Weather_model_insect_size.png", width = 12, height = 8, dpi = 300)
# Models ------------------------------------------------------------------
setwd("/Volumes/Apollo/Davos/R/Weather_Models/Insect_size")
saveRDS(m_reduced2, "m_reduced2.rds")
library(ggplot2)
library(tidyverse)
library(patchwork)
library(ggforce)
library(ggedit)
library(ggsci)
library(dplyr)
library(lubridate)
library(ggbreak)
library(ggthemes)
library(gglorenz)
library(ggpubr)
library(ggeffects)
library(lme4)
library(flexplot)
library(GGally)
library(lattice)
library(lmerTest)
library(mgcv)
library(mgcViz)
library(effects)
library(DHARMa)
library(emmeans)
library(sjPlot)
library(broom.mixed)
library(zoo)
library(psych)
library(MASS)
library(performance)
## Function definition:
# Creates the dataframes that contain only data from a specific order
## Outputs a _per_day (daily detections and biomass),
## a per_hour (hourly detections and biomass),
## and a _d_n (daily detections and biomass but for LED On/Off separately) df.
create_order_df <- function(all_transects_raw, order_name, df_prefix){
if (order_name != "others"){
temp_order_df <- subset(all_transects_raw, order == order_name)
}
else{
temp_order_df <- subset(all_transects_raw, order != "Hymenoptera" & order != "Diptera" & order != "Lepidoptera")
}
temp_df <- temp_order_df %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
group_by(site, altitude) %>%
filter(dayofyear >= 226 & dayofyear <= 261) %>% ## <---- comment out if you want to work with all data
mutate(mean_daily_detections = (n() / (261-226+1))) %>%
group_by(site, altitude, dayofyear) %>%
mutate(daily_detections = n()) %>%
ungroup() %>%
mutate(light = recode(light, "yes1" = "yes")) %>%
group_by(site, altitude, dayofyear) %>%
mutate(biomass_per_day = (sum(biomass, na.rm = TRUE))) %>%
distinct(site, altitude, dayofyear, daily_detections, biomass_per_day) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude) %>%  # Group by site and altitude
complete(dayofyear = seq(226, 261, by = 1),
fill = list(daily_detections = 0, biomass_per_day = 0)) %>%  # Complete dayofyear within the min and max range and fill missing daily_detections and biomass_per_day with 0
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) # Deletes user specified rows that correspond to days at Jatzhorn lower, where the camera was not working. Does not make sense to set these values to 0...
assign(paste0(df_prefix, "_per_day"), temp_df, envir = .GlobalEnv)
temp_df <- temp_order_df %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
group_by(LED, site, altitude) %>%
filter(dayofyear >= 226 & dayofyear <= 261) %>% ## <---- comment out if you want to work with all data
mutate(mean_daily_detections = (n() / (261-226+1))) %>%
group_by(LED, site, altitude, dayofyear) %>%
mutate(detections = n()) %>%
ungroup() %>%
mutate(light = recode(light, "yes1" = "yes")) %>%
group_by(LED, site, altitude, dayofyear) %>%
mutate(biomass = (sum(biomass, na.rm = TRUE))) %>%
distinct(LED, site, altitude, dayofyear, detections, biomass) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(LED, site, altitude) %>%  # Group by site and altitude
complete(dayofyear = seq(226, 261, by = 1),
fill = list(detections = 0, biomass = 0)) %>%  # Complete dayofyear within the min and max range and fill missing daily_detections and biomass_per_day with 0
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) # Deletes user specified rows that correspond to days at Jatzhorn lower, where the camera was not working. Does not make sense to set these values to 0...
assign(paste0(df_prefix, "_d_n"), temp_df, envir = .GlobalEnv)
temp_df <- temp_order_df %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
filter(dayofyear >= 226 & dayofyear <= 261) %>% ## <---- comment out if you want to work with all data
group_by(site, altitude, position, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(site, altitude, position, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude, position) %>%
complete(Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
fill(position, .direction = "downup") %>%
ungroup() %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
assign(paste0(df_prefix, "_per_hour"), temp_df, envir = .GlobalEnv)
}
create_rollsum_df <- function(filter, df_name){
if (!is.na(filter)){
temp_order_df <- subset(all_transects_active, order == filter)
}
else{
temp_order_df <- all_transects_active
}
per_hour_rollsum <- temp_order_df %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
group_by(site, altitude, position, Hour, Minute) %>%
mutate(minute_abundance = n()) %>%
ungroup() %>%
distinct(site, altitude, position, Hour, Minute, minute_abundance, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude, position) %>%
complete(Hour = seq(0, 23, by = 1), Minute = seq(0, 59, by = 1),
fill = list(minute_abundance = 0)) %>%
fill(position, .direction = "downup") %>%
group_by(site, altitude, position) %>%
mutate(hourly_abundance = rollsum(minute_abundance, k = 60, fill = NA, align = "center")) %>%
ungroup() %>%
mutate(timeofday = Hour + Minute / 60)
assign(paste0(df_name, "_rollsum"), per_hour_rollsum, envir = .GlobalEnv)
}
## Function definition to create a comparison plot of model predictions with and without LED differentiation
build_master_plot <- function(df_without_LED, df_with_LED, order) {
site_colors <- c("Jatzhorn" = "steelblue4",
"Monstein" = "darkolivegreen3",
"Weissfluhjoch" = "darkgoldenrod1")
m <-lmer(sqrt(daily_detections)~site*altitude+(1|dayofyear), df_without_LED)
em <- as.data.frame(emmeans(m, ~ site*altitude, at = list(altitude = altitude_seq), CI = T, type = "response"))
abundance <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = .1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste(order, "Abundance [n/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
scale_x_continuous(breaks = seq(1400, max(df_without_LED$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.9), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14))
m <-lmer(sqrt(detections)~site*altitude*LED+(1|dayofyear), df_with_LED)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
abundance_LED <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = .1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste(order, "Abundance [n/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.9), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <- lmer(sqrt(biomass_per_day)~site*altitude+(1|dayofyear), df_without_LED)
em <- as.data.frame(emmeans(m, ~ site*altitude, at = list(altitude = altitude_seq), CI = T, type = "response"))
biomass <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = 0.1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste(order, "Biomass [mg/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
scale_x_continuous(breaks = seq(1400, max(df_without_LED$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.15), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14))
m <- lmer(sqrt(biomass)~site*altitude*LED+(1|dayofyear), df_with_LED)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
biomass_LED <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = 0.1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste(order, "Biomass [mg/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.15), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
abundance + biomass + abundance_LED + biomass_LED +
plot_layout(ncol = 2) +
plot_annotation(tag_levels = "A") +
plot_layout(guides = "collect") &
theme(legend.position = "bottom",
plot.tag.position = c(0.05, .97))
}
build_orders_plot <- function(df_with_LED_d,
df_with_LED_h,
df_with_LED_l) {
site_colors <- c("Jatzhorn" = "steelblue4",
"Monstein" = "darkolivegreen3",
"Weissfluhjoch" = "darkgoldenrod1")
m <-lmer(sqrt(detections)~site*altitude*LED+(1|dayofyear), df_with_LED_d)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
abundance_LED_d <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = .1, color = NA) +
geom_line(linewidth = .7) +
labs(x = NULL, y = paste("Diptera Abundance [n/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.9), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <- lmer(sqrt(biomass)~site*altitude*LED+(1|dayofyear), df_with_LED_d)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
biomass_LED_d <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = 0.1, color = NA) +
geom_line(linewidth = .7) +
labs(x = NULL, y = paste("Diptera Biomass [mg/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.15), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <-lmer(sqrt(detections)~site*altitude*LED+(1|dayofyear), df_with_LED_h)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
abundance_LED_h <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = .1, color = NA) +
geom_line(linewidth = .7) +
labs(x = NULL, y = paste("Hymenoptera Abundance [n/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.9), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <- lmer(sqrt(biomass)~site*altitude*LED+(1|dayofyear), df_with_LED_h)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
biomass_LED_h <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = 0.1, color = NA) +
geom_line(linewidth = .7) +
labs(x = NULL, y = paste("Hymenoptera Biomass [mg/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.15), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <-lmer(sqrt(detections)~site*altitude*LED+(1|dayofyear), df_with_LED_l)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
abundance_LED_l <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = .1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste("Lepidoptera Abundance [n/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.9), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
m <- lmer(sqrt(biomass)~site*altitude*LED+(1|dayofyear), df_with_LED_l)
em <- as.data.frame(emmeans(m, ~ site*altitude*LED, at = list(altitude = altitude_seq), CI = T, type = "response"))
biomass_LED_l <- ggplot(em, aes(altitude, response, color = site)) +
geom_ribbon(aes(ymin = lower.CL, ymax = upper.CL, fill = site), alpha = 0.1, color = NA) +
geom_line(linewidth = .7) +
labs(x = "Elevation [m a.s.l.]", y = paste("Lepidoptera Biomass [mg/day]"),
colour = "Transect", fill = "Transect", linetype = "Transect") +
#scale_x_continuous(breaks = seq(1400, max(detections_per_day$altitude), by = 200)) +
#scale_colour_npg() +
scale_color_manual(values = site_colors) +
scale_fill_manual(values = site_colors) +
theme_classic() +
theme(legend.position = c(0.9, 0.15), legend.background = element_rect(fill = "transparent"), text = element_text(size = 14)) +
facet_wrap(~LED)
abundance_LED_d + biomass_LED_d +
abundance_LED_h + biomass_LED_h +
abundance_LED_l + biomass_LED_l +
plot_layout(ncol = 2) +
plot_annotation(tag_levels = "A") +
plot_layout(guides = "collect") &
theme(legend.position = "bottom",
plot.tag.position = c(0.05, .97))
}
## Helper function to convert a list of variables into a factor
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
## Set working directory
setwd("/Volumes/Apollo/Diopsis_Cameras/RESULTS_2024/result_csvs")
# Reading in the data ------------------------------------------------------------------------
## For all data gathering and transformations, see script Reading_and_processing_raw_csvs.R
all_transects_active <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
#mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")) %>%
mutate(LED = if_else(light == "no", "LED Off",if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")))
all_transects_raw <- read.csv("all_transects_raw.csv", sep = ",") %>%
#mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")) %>%
mutate(LED = if_else(light == "no", "LED Off",if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")))
all_transects_active <- factor_wizzard(all_transects_active, c("site", "LED"))
all_transects_raw <- factor_wizzard(all_transects_raw, c("site", "LED"))
## Summarizes the Sites into a smaller dataframe
detections_per_day <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
filter(dayofyear>=226) %>% ## else, the starting dayofyear is 205 -> dont forget to edit the complete function below in this case
distinct(site, altitude, dayofyear, daily_detections, biomass_per_day) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude) %>%  # Group by site and altitude
complete(dayofyear = seq(226, 261, by = 1),
fill = list(daily_detections = 0, biomass_per_day = 0)) %>%  # Complete dayofyear within the min and max range and fill missing daily_detections and biomass_per_day with 0
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) # Deletes the rows that correspond to days at Jatzhorn lower, where the camera was not working. Does not make sense to set these values to 0...
dp_d_n <- all_transects_active %>% # detections per day and night
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
filter(dayofyear >= 226) %>%
group_by(LED, site, altitude, position, dayofyear) %>%
summarise(detections = n(), biomass = sum(biomass, na.rm = TRUE)) %>%
ungroup() %>%
distinct(LED, site, altitude, position, dayofyear, detections, biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(LED, site, altitude, position) %>%
complete(dayofyear = seq(226, 261, by = 1),
fill = list(detections = 0, biomass = 0)) %>%
fill(position, .direction = "downup") %>%
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231)))
per_hour <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
group_by(site, altitude, position, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(site, altitude, position, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude, position) %>%
complete(Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
fill(position, .direction = "downup") %>%
ungroup() %>%filter(Hour != 0) %>% # Remove row of midnight, because sometimes light was switched on for a short duration after 12am
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
# Rolling sum (Minute steps) of hourly abundance
create_rollsum_df(filter = NA, df_name = "per_hour")
create_rollsum_df(filter = "Diptera", df_name = "diptera")
create_rollsum_df(filter = "Hymenoptera", df_name = "hyme")
create_rollsum_df(filter = "Lepidoptera", df_name = "lepi")
detections_per_day <- factor_wizzard(detections_per_day, c("site"))
per_hour <- factor_wizzard(per_hour, c("site", "position", "LED"))
dp_d_n <- factor_wizzard(dp_d_n, c("site", "position", "LED"))
## Create dataframes containing only Diptera, Lepidoptera and Hymenoptera:
create_order_df(all_transects_raw, "Lepidoptera", "lepi")
create_order_df(all_transects_raw, "Diptera", "diptera")
create_order_df(all_transects_raw, "Hymenoptera", "hyme")
create_order_df(all_transects_raw, "others", "others")
# The Models --------------------------------------------------------------------------
altitude_seq <- seq(min(all_transects_active$altitude), max(all_transects_active$altitude), by = 10)
## Abundances (detections per day) model:
m <-lmer(sqrt(daily_detections)~site*altitude+(1|dayofyear), detections_per_day)
mLED <-lmer(sqrt(detections)~site*altitude*LED+(1|dayofyear), dp_d_n)
## Abundance and Biomass masterplot:
build_master_plot(detections_per_day, dp_d_n, "Total")
ggsave("/Volumes/Apollo/Davos/Plots/Total_Abundance_Biomass_masterplot1.png", width = 10, height = 11, dpi = 300)
View(all_transects_active)
all_transects_active1 <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
#mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_raw <- read.csv("all_transects_raw.csv", sep = ",") %>%
#mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")) %>%
mutate(LED = if_else(light == "no", "LED Off",if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off")))
all_transects_active1 <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
View(all_transects_active1)
car::Anova(m)
car::Anova(mLED)
