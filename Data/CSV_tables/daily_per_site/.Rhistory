library(dplyr)
library(tidyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(plotly)
library(GGally)
library(gratia)
library(mgcv)
library(mgcViz)
library(corrplot)
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv_3hour")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/3hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")]) %>%
mutate(site = "Jatzhorn", position = "Middle") # <---------------------------- HIER SITE WIEDER ÄNDERN NACH PROTOTYPING
df <- rbind(WFJ_low, WFJ_mid)
rm(WFJ_low_weather, WFJ_mid_weather)
df <- factor_wizzard(df, c("LED", "site", "position"))
rm(factor_wizzard)
plot(df %>% select(PSUM, RH, RSWR, TA, TSG, VW, hourly_abundance))
View(df)
library(dplyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(plotly)
library(GGally)
library(gratia)
library(mgcv)
library(mgcViz)
library(corrplot)
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv_daily")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/daily_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather %>% arrange(timestamp, DayNight) %>% select(-timestamp, -DayNight),
WFJ_low %>% arrange(timestamp, DayNight)) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- cbind(WFJ_mid_weather %>% arrange(timestamp, DayNight) %>% select(-timestamp, -DayNight),
WFJ_mid %>% arrange(timestamp, DayNight)) %>%
mutate(site = "Jatzhorn", position = "Lower") # <---------------------------- HIER SITE WIEDER ÄNDERN NACH PROTOTYPING
df <- rbind(WFJ_low, WFJ_mid)
rm(WFJ_low_weather, WFJ_mid_weather)
df <- factor_wizzard(df, c("LED", "site", "position"))
rm(factor_wizzard)
View(df)
m_full <- gam(n_Diptera ~ s(PSUM) + te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
s(RH) + te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR)+ te(RSWR, site, LED, bs = c("cr", "fs", "fs")) +
s(TA) + te(TA, site, LED, bs = c("cr", "fs", "fs")) +
s(TSG) + te(TSG, site, LED, bs = c("cr", "fs", "fs")) +
s(VW) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m_full)
draw(m_full)
df$Fitted <- fitted(m_full)
p <- ggplot(df, aes(x = timestamp)) +
geom_line(aes(y = abundance, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted")) +
labs(x = "Time", y = "DayNightly Abundance") +
scale_color_manual("", values = c("Observed" = "black", "Fitted" = "blue")) +
theme_minimal() +
facet_wrap(~site)
ggplotly(p)
m_full <- gam(abundance ~ s(PSUM) + te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
s(RH) + te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR)+ te(RSWR, site, LED, bs = c("cr", "fs", "fs")) +
s(TA) + te(TA, site, LED, bs = c("cr", "fs", "fs")) +
s(TSG) + te(TSG, site, LED, bs = c("cr", "fs", "fs")) +
s(VW) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m_full)
df$Fitted <- fitted(m_full)
p <- ggplot(df, aes(x = timestamp)) +
geom_line(aes(y = abundance, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted")) +
labs(x = "Time", y = "DayNightly Abundance") +
scale_color_manual("", values = c("Observed" = "black", "Fitted" = "blue")) +
theme_minimal() +
facet_wrap(~site~LED)
ggplotly(p)
m <- gam(abundance ~ s(PSUM) + s(PSUM, by = site) + s(PSUM, by = LED) +
te(PSUM, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
m <- gam(abundance ~ s(RH) + s(RH, by = site) + s(RH, by = LED) +
te(RH, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
m <- gam(abundance ~ s(RSWR) + s(RSWR, by = site) + s(RSWR, by = LED) +
te(RSWR, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
draw(m)
df$Fitted <- fitted(m)
p <- ggplot(df, aes(x = timestamp)) +
geom_line(aes(y = abundance, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted")) +
labs(x = "Time", y = "DayNightly Abundance") +
scale_color_manual("", values = c("Observed" = "black", "Fitted" = "blue")) +
theme_minimal() +
facet_wrap(~site~LED)
ggplotly(p)
m <- gam(abundance ~ s(TA) + s(TA, by = site) + s(TA, by = LED) +
te(TA, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
m <- gam(abundance ~ s(TSG) + s(TSG, by = site) + s(TSG, by = LED) +
te(TSG, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
m <- gam(abundance ~ s(VW) + s(VW, by = site) + s(VW, by = LED) +
te(VW, site, LED, bs = c("cr", "fs", "fs")),
family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m)
m_full <- gam(abundance ~ s(PSUM) + te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
s(RH) + s(RH, by = site) + te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR)+ s(RSWR, by = LED) + te(RSWR, site, LED, bs = c("cr", "fs", "fs")) +
s(TA) + s(TA, by = site) + te(TA, site, LED, bs = c("cr", "fs", "fs")) +
s(TSG) + s(TSG, by = site) + s(TSG, by = LED) + te(TSG, site, LED, bs = c("cr", "fs", "fs")) +
s(VW) + s(VW, by = LED) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m_full)
m <- gam(abundance ~ s(PSUM) + te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR) +
s(TA, by = site) +
s(TSG) + s(TSG, by = LED) +
s(VW) + s(VW, by = LED) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML") # <--- use Gamma instead of poisson if modeling biomass
summary(m)
mgcv::gam.check(m)
m1 <- gam(abundance ~ s(PSUM) + te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR) +
s(TSG) + s(TSG, by = LED) +
s(VW) + s(VW, by = LED) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m1)
m1 <- gam(abundance ~ te(PSUM, site, LED, bs = c("cr", "fs", "fs")) +
te(RH, site, LED, bs = c("cr", "fs", "fs")) +
s(RSWR) +
s(TSG) + s(TSG, by = LED) +
s(VW, by = LED) + te(VW, site, LED, bs = c("cr", "fs", "fs")) +
LED + site + DayNight
, family = nb(link = "log"), data = df, select = TRUE, method = "REML")
summary(m1)
mgcv::gam.check(m1)
AIC(m, m1)
BIC(m, m1)
df$Fitted <- fitted(m1)
p <- ggplot(df, aes(x = timestamp)) +
geom_line(aes(y = abundance, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted")) +
labs(x = "Time", y = "DayNightly Abundance") +
scale_color_manual("", values = c("Observed" = "black", "Fitted" = "blue")) +
theme_minimal() +
facet_wrap(~site~LED)
ggplotly(p)
draw(m1)
