per_hour_WFJ_mid <- create_per_hour_df(all_transects_active, "Weissfluhjoch", "Mid")
per_hour_WFJ_up <- create_per_hour_df(all_transects_active, "Weissfluhjoch", "Upper")
per_hour_JATZ_low <- create_per_hour_df(all_transects_active, "Jatzhorn", "Lower")
per_hour_JATZ_mid <- create_per_hour_df(all_transects_active, "Jatzhorn", "Mid")
per_hour_JATZ_up <- create_per_hour_df(all_transects_active, "Jatzhorn", "Upper")
per_hour_MON_low <- create_per_hour_df(all_transects_active, "Monstein", "Lower")
per_hour_MON_up <- create_per_hour_df(all_transects_active, "Jatzhorn", "Upper")
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
write.csv(per_hour_WFJ_low, "weissfluhjoch_low.csv", row.names = FALSE)
write.csv(per_hour_WFJ_mid, "weissfluhjoch_mid.csv", row.names = FALSE)
write.csv(per_hour_WFJ_up, "weissfluhjoch_up.csv", row.names = FALSE)
write.csv(per_hour_JATZ_low, "jatzhorn_low.csv", row.names = FALSE)
write.csv(per_hour_JATZ_mid, "jatzhorn_mid.csv", row.names = FALSE)
write.csv(per_hour_JATZ_up, "jatzhorn_up.csv", row.names = FALSE)
write.csv(per_hour_MON_low, "monstein_low.csv", row.names = FALSE)
write.csv(per_hour_MON_up, "monstein_up.csv", row.names = FALSE)
library(dplyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(mgcViz)
library(corrplot)
library(broom)
library(tseries)
# For LASSO:
library(glmnet)
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",")
View(WFJ_low_weather)
class(WFJ_low_weather$timestamp)
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
class(WFJ_low_weather$timestamp)
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
View(WFJ_low)
WFJ_low <- cbind(WFJ_low_weather, WFJ_low)
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")])
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")])
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_low[ , !(names(WFJ_mid) %in% "timestamp")])
View(WFJ_mid)
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")])
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")])
WFJ_low <- mutate(site = "Weissfluhjoch")
WFJ_low <- WFJ_low %>%
mutate(site = "Weissfluhjoch")
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- WFJ_low %>%
cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- WFJ_mid %>%
cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Middle")
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Middle")
df <- rbind(WFJ_low, WFJ_mid)
View(df)
rm(WFJ_low_weather)
library(dplyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(mgcViz)
library(corrplot)
library(broom)
library(tseries)
# For LASSO:
library(glmnet)
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Middle")
df <- rbind(WFJ_low, WFJ_mid)
rm(WFJ_low_weather, WFJ_mid_weather)
library(dplyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(mgcViz)
library(corrplot)
library(broom)
library(tseries)
# For LASSO:
library(glmnet)
setwd("/Volumes/Apollo/Diopsis_Cameras/RESULTS_2024/result_csvs")
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
all_transects_active <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_raw <- read.csv("all_transects_raw.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_active <- factor_wizzard(all_transects_active, c("site", "LED"))
all_transects_raw <- factor_wizzard(all_transects_raw, c("site", "LED"))
## Summarizes the Sites into a smaller dataframe
detections_per_day <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
filter(dayofyear>=226) %>% ## else, the starting dayofyear is 205 -> dont forget to edit the complete function below in this case
distinct(site, altitude, dayofyear, daily_detections, biomass_per_day) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(site, altitude) %>%  # Group by site and altitude
complete(dayofyear = seq(226, 261, by = 1),
fill = list(daily_detections = 0, biomass_per_day = 0)) %>%  # Complete dayofyear within the min and max range and fill missing daily_detections and biomass_per_day with 0
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) # Deletes the rows that correspond to days at Jatzhorn lower, where the camera was not working. Does not make sense to set these values to 0...
dp_d_n <- all_transects_active %>% # detections per day and night
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
filter(dayofyear >= 226) %>%
group_by(LED, site, altitude, position, dayofyear) %>%
summarise(detections = n(), biomass = sum(biomass, na.rm = TRUE)) %>%
ungroup() %>%
distinct(LED, site, altitude, position, dayofyear, detections, biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(LED, site, altitude, position) %>%
complete(dayofyear = seq(226, 261, by = 1),
fill = list(detections = 0, biomass = 0)) %>%
fill(position, .direction = "downup") %>%
ungroup() %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231)))
per_hour <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
#group_by(site, altitude, position, Hour) %>%
group_by(Month, Day, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(Month, Day, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(Month) %>%
complete(Day = 1:31,
Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
#fill(position, .direction = "downup") %>%
#ungroup() %>%filter(Hour != 0) %>% # Remove row of midnight, because sometimes light was switched on for a short duration after 12am
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
per_hour <- per_hour %>%
mutate(date = ymd(paste("2024", Month, Day, sep = "-"), quiet = TRUE)) %>%
filter(!is.na(date))
per_hour <- per_hour[529:1896, ]
detections_per_day <- factor_wizzard(detections_per_day, c("site"))
#per_hour <- factor_wizzard(per_hour, c("site", "position", "LED"))
dp_d_n <- factor_wizzard(dp_d_n, c("site", "position", "LED"))
weather <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminWeather.csv", sep = ";")
explanations <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminExplanations.csv", sep = ";")
# Create a named vector of descriptions
param_to_desc <- setNames(explanations$parameter_description_de, explanations$parameter_shortname)
# Get the column names of the climate data
climate_cols <- colnames(weather)
# Match the descriptions to the columns
descriptions <- sapply(climate_cols, function(col) {
if (col %in% names(param_to_desc)) {
param_to_desc[col]
} else {
"No description found"
}
})
# Combine: add the descriptions as the first row, then the actual data
# Convert descriptions to a data.frame with the same column names
description_row <- as.data.frame(t(descriptions), stringsAsFactors = FALSE)
colnames(description_row) <- climate_cols
head(weather$reference_timestamp)
weather$datetime <- as.POSIXct(weather$reference_timestamp, format = "%d.%m.%Y %H:%M")
start_date <- as.POSIXct("2024-07-23 00:00")
end_date <- as.POSIXct("2024-09-17 23:59")
weather <- weather[weather$datetime >= start_date & weather$datetime <= end_date, ]
weather <- weather[6:nrow(weather),]
weather_essential <- weather[, 4:ncol(weather)-1]
weather_essential <- weather_essential %>% select(where(~ !all(is.na(.))))
plot(weather_essential)
weather_essential <- weather_essential %>% select(-tre200hn)
weather_essential <- weather_essential %>% select(-tre200hx)
weather_essential <- weather_essential %>% select(-tre005hn)
weather_essential <- weather_essential %>% select(-tde200h0)
weather_essential <- weather_essential %>% select(-ppz850h0)
weather_essential <- weather_essential %>% select(-prestah0)
weather_essential <- weather_essential %>% select(-fu3010h0)
weather_essential <- weather_essential %>% select(-fu3010h3)
weather_essential <- weather_essential %>% select(-fu3010h1)
weather_essential <- weather_essential %>% select(-fkl010h1)
plot(weather_essential)
df <- cbind(per_hour, weather_essential)
df <- df %>% select(-hourly_biomass)
df$datetime <- ymd_h(paste(df$date, df$Hour))
df <- df %>% select(-date)
# Convert the 'nat' column to a time series object
abundance_ts <- ts(df$hourly_abundance, start = 1, frequency = 24)
# Decompose the time series
abundance_decomp <- decompose(abundance_ts)
plot(abundance_decomp)
setwd("/Volumes/Apollo/Diopsis_Cameras/RESULTS_2024/result_csvs")
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
all_transects_active <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_active <- factor_wizzard(all_transects_active, c("site", "LED"))
per_hour <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
#group_by(site, altitude, position, Hour) %>%
group_by(Month, Day, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(Month, Day, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(Month) %>%
complete(Day = 1:31,
Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
#fill(position, .direction = "downup") %>%
#ungroup() %>%filter(Hour != 0) %>% # Remove row of midnight, because sometimes light was switched on for a short duration after 12am
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
per_hour <- per_hour %>%
mutate(date = ymd(paste("2024", Month, Day, sep = "-"), quiet = TRUE)) %>%
filter(!is.na(date))
per_hour <- per_hour[529:1896, ]
weather <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminWeather.csv", sep = ";")
explanations <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminExplanations.csv", sep = ";")
# Create a named vector of descriptions
param_to_desc <- setNames(explanations$parameter_description_de, explanations$parameter_shortname)
# Get the column names of the climate data
climate_cols <- colnames(weather)
# Match the descriptions to the columns
descriptions <- sapply(climate_cols, function(col) {
if (col %in% names(param_to_desc)) {
param_to_desc[col]
} else {
"No description found"
}
})
# Combine: add the descriptions as the first row, then the actual data
# Convert descriptions to a data.frame with the same column names
description_row <- as.data.frame(t(descriptions), stringsAsFactors = FALSE)
colnames(description_row) <- climate_cols
head(weather$reference_timestamp)
weather$datetime <- as.POSIXct(weather$reference_timestamp, format = "%d.%m.%Y %H:%M")
start_date <- as.POSIXct("2024-07-23 00:00")
end_date <- as.POSIXct("2024-09-17 23:59")
weather <- weather[weather$datetime >= start_date & weather$datetime <= end_date, ]
weather <- weather[6:nrow(weather),]
weather_essential <- weather[, 4:ncol(weather)-1]
weather_essential <- weather_essential %>% select(where(~ !all(is.na(.))))
plot(weather_essential)
weather_essential <- weather_essential %>% select(-tre200hn)
weather_essential <- weather_essential %>% select(-tre200hx)
weather_essential <- weather_essential %>% select(-tre005hn)
weather_essential <- weather_essential %>% select(-tde200h0)
weather_essential <- weather_essential %>% select(-ppz850h0)
weather_essential <- weather_essential %>% select(-prestah0)
weather_essential <- weather_essential %>% select(-fu3010h0)
weather_essential <- weather_essential %>% select(-fu3010h3)
weather_essential <- weather_essential %>% select(-fu3010h1)
weather_essential <- weather_essential %>% select(-fkl010h1)
df <- cbind(per_hour, weather_essential)
df <- df %>% select(-hourly_biomass)
df$datetime <- ymd_h(paste(df$date, df$Hour))
df <- df %>% select(-date)
# Convert the 'nat' column to a time series object
abundance_ts <- ts(df$hourly_abundance, start = 1, frequency = 24)
# Decompose the time series
abundance_decomp <- decompose(abundance_ts)
plot(abundance_decomp)
# Test stationarity
adf.test(df$hourly_abundance)
setwd("/Volumes/Apollo/Diopsis_Cameras/RESULTS_2024/result_csvs")
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
all_transects_active <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_active <- factor_wizzard(all_transects_active, c("site", "LED"))
per_hour <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
#group_by(site, altitude, position, Hour) %>%
group_by(Month, Day, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(Month, Day, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(Month) %>%
complete(Day = 1:31,
Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
#fill(position, .direction = "downup") %>%
#ungroup() %>%filter(Hour != 0) %>% # Remove row of midnight, because sometimes light was switched on for a short duration after 12am
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
rm(all_transects_active)
per_hour <- per_hour %>%
mutate(date = ymd(paste("2024", Month, Day, sep = "-"), quiet = TRUE)) %>%
filter(!is.na(date))
per_hour <- per_hour[529:1896, ]
weather <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminWeather.csv", sep = ";")
explanations <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminExplanations.csv", sep = ";")
# Create a named vector of descriptions
param_to_desc <- setNames(explanations$parameter_description_de, explanations$parameter_shortname)
# Get the column names of the climate data
climate_cols <- colnames(weather)
# Match the descriptions to the columns
descriptions <- sapply(climate_cols, function(col) {
if (col %in% names(param_to_desc)) {
param_to_desc[col]
} else {
"No description found"
}
})
# Combine: add the descriptions as the first row, then the actual data
# Convert descriptions to a data.frame with the same column names
description_row <- as.data.frame(t(descriptions), stringsAsFactors = FALSE)
colnames(description_row) <- climate_cols
rm(param_to_desc, descriptions, climate_cols)
head(weather$reference_timestamp)
weather$datetime <- as.POSIXct(weather$reference_timestamp, format = "%d.%m.%Y %H:%M")
start_date <- as.POSIXct("2024-07-23 00:00")
end_date <- as.POSIXct("2024-09-17 23:59")
weather <- weather[weather$datetime >= start_date & weather$datetime <= end_date, ]
weather <- weather[6:nrow(weather),]
weather_essential <- weather[, 4:ncol(weather)-1]
weather_essential <- weather_essential %>% select(where(~ !all(is.na(.))))
setwd("/Volumes/Apollo/Diopsis_Cameras/RESULTS_2024/result_csvs")
factor_wizzard <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])  # Correct way to reference column names
}
return(df)  # Return modified dataframe
}
all_transects_active <- read.csv("all_transects_simultaniously_active.csv", sep = ",") %>%
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
all_transects_active <- factor_wizzard(all_transects_active, c("site", "LED"))
per_hour <- all_transects_active %>%
filter(!(site == "Jatzhorn" & altitude == 1532 & dayofyear %in% c(212:221, 224, 228:231))) %>%
#group_by(site, altitude, position, Hour) %>%
group_by(Month, Day, Hour) %>%
summarise(hourly_abundance = n(), hourly_biomass = sum(biomass, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
distinct(Month, Day, Hour, hourly_abundance, hourly_biomass, .keep_all = F) %>%  # Get distinct combinations of site, altitude, dayofyear, daily_detections, biomass_per_day
group_by(Month) %>%
complete(Day = 1:31,
Hour = seq(0, 23, by = 1),
fill = list(hourly_abundance = 0, hourly_biomass = 0)) %>%
#fill(position, .direction = "downup") %>%
#ungroup() %>%filter(Hour != 0) %>% # Remove row of midnight, because sometimes light was switched on for a short duration after 12am
mutate(LED = if_else(Hour >= 21 & Hour <= 24, "LED On", "LED Off"))
rm(all_transects_active)
per_hour <- per_hour %>%
mutate(date = ymd(paste("2024", Month, Day, sep = "-"), quiet = TRUE)) %>%
filter(!is.na(date))
per_hour <- per_hour[529:1896, ]
weather <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminWeather.csv", sep = ";")
explanations <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminExplanations.csv", sep = ";")
# Create a named vector of descriptions
param_to_desc <- setNames(explanations$parameter_description_de, explanations$parameter_shortname)
# Get the column names of the climate data
climate_cols <- colnames(weather)
# Match the descriptions to the columns
descriptions <- sapply(climate_cols, function(col) {
if (col %in% names(param_to_desc)) {
param_to_desc[col]
} else {
"No description found"
}
})
# Combine: add the descriptions as the first row, then the actual data
# Convert descriptions to a data.frame with the same column names
description_row <- as.data.frame(t(descriptions), stringsAsFactors = FALSE)
colnames(description_row) <- climate_cols
rm(param_to_desc, descriptions, climate_cols, explanations)
head(weather$reference_timestamp)
weather$datetime <- as.POSIXct(weather$reference_timestamp, format = "%d.%m.%Y %H:%M")
start_date <- as.POSIXct("2024-07-23 00:00")
end_date <- as.POSIXct("2024-09-17 23:59")
weather <- weather[weather$datetime >= start_date & weather$datetime <= end_date, ]
weather <- weather[6:nrow(weather),]
weather_essential <- weather[, 4:ncol(weather)-1]
weather_essential <- weather_essential %>% select(where(~ !all(is.na(.))))
plot(weather_essential)
weather_essential <- weather_essential %>% select(-tre200hn)
weather_essential <- weather_essential %>% select(-tre200hx)
weather_essential <- weather_essential %>% select(-tre005hn)
weather_essential <- weather_essential %>% select(-tde200h0)
weather_essential <- weather_essential %>% select(-ppz850h0)
weather_essential <- weather_essential %>% select(-prestah0)
weather_essential <- weather_essential %>% select(-fu3010h0)
weather_essential <- weather_essential %>% select(-fu3010h3)
weather_essential <- weather_essential %>% select(-fu3010h1)
weather_essential <- weather_essential %>% select(-fkl010h1)
plot(weather_essential)
df <- cbind(per_hour, weather_essential)
df <- df %>% select(-hourly_biomass)
df$datetime <- ymd_h(paste(df$date, df$Hour))
df <- df %>% select(-date)
# Convert the 'nat' column to a time series object
abundance_ts <- ts(df$hourly_abundance, start = 1, frequency = 24)
# Decompose the time series
abundance_decomp <- decompose(abundance_ts)
rm(abundance_ts)
plot(abundance_decomp)
rm(abundance_ts, abundance_decomp)
weather <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminWeather.csv", sep = ";")
explanations <- read.csv("/Volumes/Apollo/Davos/Wetterdaten/GeoAdminExplanations.csv", sep = ";")
# Create a named vector of descriptions
param_to_desc <- setNames(explanations$parameter_description_de, explanations$parameter_shortname)
# Get the column names of the climate data
climate_cols <- colnames(weather)
# Match the descriptions to the columns
descriptions <- sapply(climate_cols, function(col) {
if (col %in% names(param_to_desc)) {
param_to_desc[col]
} else {
"No description found"
}
})
# Combine: add the descriptions as the first row, then the actual data
# Convert descriptions to a data.frame with the same column names
description_row <- as.data.frame(t(descriptions), stringsAsFactors = FALSE)
colnames(description_row) <- climate_cols
rm(param_to_desc, descriptions, climate_cols, explanations)
head(weather$reference_timestamp)
weather$datetime <- as.POSIXct(weather$reference_timestamp, format = "%d.%m.%Y %H:%M")
start_date <- as.POSIXct("2024-07-23 00:00")
end_date <- as.POSIXct("2024-09-17 23:59")
weather <- weather[weather$datetime >= start_date & weather$datetime <= end_date, ]
weather <- weather[6:nrow(weather),]
weather_essential <- weather[, 4:ncol(weather)-1]
weather_essential <- weather_essential %>% select(where(~ !all(is.na(.))))
plot(weather_essential)
weather_essential <- weather_essential %>% select(-tre200hn, -tre200hx, -tre005hn,
-tde200h0, -ppz850h0, -prestah0,
-fu3010h0, -fu3010h3, -fu3010h1,
-fkl010h1)
View(df)
library(dplyr)
library(lubridate)
library(emmeans)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(mgcViz)
library(corrplot)
library(broom)
library(tseries)
# For LASSO:
library(glmnet)
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/smet_as_csv")
WFJ_low_weather <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid_weather <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
setwd("/Volumes/Apollo/Davos/Data/CSV_tables/hourly_per_site")
WFJ_low <- read.csv("weissfluhjoch_low.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_mid <- read.csv("weissfluhjoch_mid.csv", sep = ",") %>%
mutate(timestamp = as.POSIXct(timestamp))
WFJ_low <- cbind(WFJ_low_weather, WFJ_low[ , !(names(WFJ_low) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Lower")
WFJ_mid <- cbind(WFJ_mid_weather, WFJ_mid[ , !(names(WFJ_mid) %in% "timestamp")]) %>%
mutate(site = "Weissfluhjoch", position = "Middle")
df <- rbind(WFJ_low, WFJ_mid)
rm(WFJ_low_weather, WFJ_mid_weather)
